<!-- <% for(const question of questions) { %>
<div><%= question.statement %></div>
<% for(const option of question.options) { %>
<div class="row">
  <div class="col-md-10"><%= option.content %></div>
  <div class="col-md-2">
    <input type="number" min="0" max="30" class="" />
  </div>
</div>
<% } %> <% } %> -->

<!--
    Locals: {
        loggedIn,
        title,
        description,
        assessment_id,
        questions,
        user_module
    }
-->

<%- include('../partials/header.ejs', { loggedIn }) %>

<div class="container">
  <div class="display-4">Creativity Motivation Assessment</div>
  <p>
    Given below are a number of situations, and 6 alternatives in each
    situation. How would you respond in each situation if you had to choose only
    from amongst the given alternatives. In each situation, you have 30 points
    to allocate between the six alternatives. Consider each alternative
    carefully, and bearing in mind the other given alternatives, give it the
    points that reflects its priority to you.
  </p>

  <div>
    You should allocate points to the alternatives subject to the following
    rules.
    <ol>
      <li>The points must sum to 30.</li>
      <li>
        The maximum points you can give an alternative is 15; the minimum is 1.
      </li>
      <li>No decimals are permitted.</li>
    </ol>

    <p>
      Please put down your points for each alternative in the space provided to
      the right of the alternative. After you have put down the points for all
      the alternatives in a situation, total them up and make sure that they sum
      to 30. For each question, first read through all the alternatives. Next,
      identify the ones that appeal to you the most, and give them the
      appropriate points. Finally, give appropriate points to the remaining
      alternatives.
    </p>
  </div>

  <div class="alert alert-success">
    Time spent:
    <span id="timer_display"></span>
  </div>

  <form action="/creativity/CM/submit/" method="POST" name="moduleForm">
    <% questions.map((question, num) => { %>

    <div class="row shadow-sm rounded p-2 my-4 bg-light">
      <div class="p mb-3"><%= question.statement %></div>

      <div class="container">
        <% question.options.map(option => { %>
        <div class="row mb-2">
          <div class="col-md-10">
            <strong><%= option._id %>. </strong>
            <span><%= option.content %></span>
          </div>
          <div class="col-md-2">
            <input
              type="number"
              min="1"
              max="15"
              class="form-control"
              required
            />
          </div>
        </div>
        <% }) %>
      </div>
    </div>
    <div class="alert alert-warning mx-0">
      Total: <span class="point_total" id="<%= question._id %>">0</span>
    </div>

    <% }) %>

    <!-- Time spent since page load -->
    <input type="number" value="0" id="time_spent" name="time_spent" hidden />
    <!-- submit -->
    <input type="submit" class="btn btn-primary" value="Submit" />
  </form>
</div>

<!-- Populate previous answers in the form -->

<script>
  const element = document.getElementById("time_spent");
  const timerDisplay = document.getElementById("timer_display");
  const storageKey = "CM_TimeSpent";

  let prev_time, timer, accum;

  function updateTimerDisplay(elapsedTimeMilli) {
    let seconds = Math.round((elapsedTimeMilli / 1000) % 60);
    let minutes = Math.round(elapsedTimeMilli / 1000 / 60);
    if (minutes.length === 1) {
      minutes = `0${minutes}`;
    }
    if (seconds.length === 1) {
      seconds = `0${seconds}`;
    }
    timerDisplay.innerText = `${minutes} min: ${seconds} sec`;
    element.value = elapsedTimeMilli;
  }

  function handleTimer() {
    const delta_time = Date.now() - prev_time;
    accum += delta_time;
    prev_time += delta_time;
    updateTimerDisplay(accum);
  }

  // start timer
  window.onload = function () {
    prev_time = Date.now();
    accum = Number(localStorage.getItem(storageKey)) || 0;
    console.log("total elapsed time milli: ", accum);
    updateTimerDisplay(accum);
    timer = setInterval(handleTimer, 1000);
  };

  // end timer
  window.onunload = function () {
    if (timer) {
      clearInterval(timer);
    }
    localStorage.setItem(module_id, accum);
    console.log(localStorage);
  };
</script>

<%- include('../partials/footer.ejs') %>
